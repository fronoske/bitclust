<%
 @title = "library #{@entry.name}"
 @description = @entry.description
 @edit_url = edit_url(@entry.source_location) if @conf[:edit_base_url] && @entry.source_location
%>
<% if @conf[:canonical_base_url] %>
<script type="application/ld+json">
<%=
  breadcrumb_json_ld(
    [
      {
        name: manual_home_name,
        url: absolute_url_to(@urlmapper.document_url('index'))
      },
      {
        name: _('All Libraries'),
        url: absolute_url_to(library_index_url),
      },
      {
        name: friendly_library_name(@entry.name),
        url: canonical_url
      }
    ]
  )
%>
</script>
<% end %>
<header>
  <nav>
    <ol class="inline-breadcrumb-list">
      <li>
        <%= manual_home_link() %>
      </li>
      <li>
        <a href="<%= library_index_url() %>"><%= _('All Libraries') %></a>
      </li>
      <li>
        <%= friendly_library_name(@entry.name) %>
      </li>
    </ol>
  </nav>
<% headline_init %>
<%= headline(@entry.id == '_builtin' ? _('Builtin Library') : "library #{@entry.name}", edit_url: @edit_url) %>
</header>

<main>
<%
    headline_push
    all_classes = @entry.all_classes
    err_classes = @entry.all_error_classes.sort
    modules = @entry.all_modules
    objects = @entry.all_objects
    classes = all_classes - err_classes - modules - objects
%>


<%= headline(_("Abstract")) %>
<%= compile_rd(@entry.source) %>
<%
  [[classes,      _('Classes')],
   [modules,      _('Modules')],
   [objects,      _('Objects')],
   [err_classes,  _('Exception Classes')]].each do |cs, msg|
    unless cs.empty?
%>
<%= headline(msg) %>
<table class="entries libraries">
<%    draw_tree(cs) do |c, indent| %>
<tr>
<td class="signature" style="text-indent: <%= indent * 1.0%>em;">
<span style="display:none"><%= "&nbsp;" * indent %></span>
<%= class_link(c.name, c.name) %>
</td>
<td class="description"><%= compile_rd(c.synopsis_source) %></td>
</tr>
<%    end %>
</table>
<%
    end
  end
%>
<%
  [[@entry.requires.sort, _('Required Libraries')],
   [(@entry.sublibraries - @entry.requires).sort, _('Sub-Libraries')]].each do |cs, msg|
    unless cs.empty?
%>
<%= headline(msg) %>
<table class="entries libraries">
<%    cs.each do |c| %>
<tr>
<td class="signature"><%= library_link(c.name) %></td>
<td class="description"><%= compile_rd(c.synopsis_source) %></td>
</tr>
<%    end %>
</table>
<%
    end
  end
%>
<%
    ents = @entry.methods.flat_map do |m|
      c, t, n, = methodid2specparts(m.id)
      prefix = (t == '$' ? '' : c) + t
      m.names.map { |name| [prefix + name, c + t + n] }
    end.sort
    unless ents.empty? %>
<%= headline(_("Added/Redefined Methods")) %>
<p><code>
<%    ents.each do |label, spec| %>
<%= method_link(spec, label) %>
<%    end %>
</code></p>
<%  end %>
</main>
